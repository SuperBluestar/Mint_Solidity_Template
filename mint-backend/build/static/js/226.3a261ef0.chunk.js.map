{"version":3,"file":"static/js/226.3a261ef0.chunk.js","mappings":"8GA6DAA,EAAOC,QA5CP,WAAkG,6DAAJ,GAAI,IAAhEC,eAAAA,OAAgE,aAAxCC,OAAAA,OAAwC,aAAxBC,QAAAA,OAAwB,MAAd,IAAc,EAC9FC,IACA,IAAIC,GAAU,EACd,OAAO,IAAIC,SAAQ,SAACC,GAUhB,SAASC,IACL,IAAIH,EAAJ,CAGAA,GAAU,EACVI,OAAOC,oBAAoB,uBAAwBF,GACnD,IAAQG,EAAaF,OAAbE,SACR,IAAIA,GAAcV,IAAkBU,EAASC,WAGxC,CACD,IAAMC,EAAUZ,GAAkBU,EAC5B,yCACA,qCACLT,GAAUY,QAAQC,MAAM,6BAA8BF,GACvDN,EAAQ,WAPRA,EAAQI,IAjBZF,OAAOE,SACPH,KAGAC,OAAOO,iBAAiB,uBAAwBR,EAAgB,CAAES,MAAM,IACxEC,YAAW,WACPV,MACDL,OAqBX,SAASC,IACL,GAA8B,mBAAnBH,EACP,MAAM,IAAIkB,MAAJ,gFAEV,GAAsB,mBAAXjB,EACP,MAAM,IAAIiB,MAAJ,wEAEV,GAAuB,kBAAZhB,EACP,MAAM,IAAIgB,MAAJ","sources":["../node_modules/@metamask/detect-provider/dist/index.js"],"sourcesContent":["\"use strict\";\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeout = 3000, } = {}) {\n    _validateInputs();\n    let handled = false;\n    return new Promise((resolve) => {\n        if (window.ethereum) {\n            handleEthereum();\n        }\n        else {\n            window.addEventListener('ethereum#initialized', handleEthereum, { once: true });\n            setTimeout(() => {\n                handleEthereum();\n            }, timeout);\n        }\n        function handleEthereum() {\n            if (handled) {\n                return;\n            }\n            handled = true;\n            window.removeEventListener('ethereum#initialized', handleEthereum);\n            const { ethereum } = window;\n            if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n                resolve(ethereum);\n            }\n            else {\n                const message = mustBeMetaMask && ethereum\n                    ? 'Non-MetaMask window.ethereum detected.'\n                    : 'Unable to detect window.ethereum.';\n                !silent && console.error('@metamask/detect-provider:', message);\n                resolve(null);\n            }\n        }\n    });\n    function _validateInputs() {\n        if (typeof mustBeMetaMask !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n        }\n        if (typeof silent !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n        }\n        if (typeof timeout !== 'number') {\n            throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n        }\n    }\n}\nmodule.exports = detectEthereumProvider;\n"],"names":["module","exports","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","Error"],"sourceRoot":""}